import { Injectable } from '@angular/core';
import { Idle, Keepalive } from '@ng-idle/core';
import { MatDialog } from '@angular/material/dialog';
import { WarningPopupComponent } from './warning-popup.component';
import { Router } from '@angular/router';

@Injectable({
  providedIn: 'root',
})
export class IdleService {
  idleState = 'Not started.';
  timedOut = false;
  lastPing?: Date = null;
  countdownValue: number = 0;
  isDialogOpen = false; // Flag to track if dialog is open

  constructor(private idle: Idle, private keepalive: Keepalive, private dialog: MatDialog, private router: Router) {
    this.setupIdle();
  }

  private setupIdle() {
    // Set idle and timeout durations
    this.idle.setIdle(300);    // 5 minutes idle
    this.idle.setTimeout(30);  // 30 seconds countdown after idle
    this.idle.setInterrupts([new EventTargetInterruptSource(window, 'mousemove keydown scroll')]);

    this.idle.onIdleStart.subscribe(() => {
      this.idleState = 'You have gone idle!';
      this.showWarningPopup(); // Show the popup when idle starts
    });

    this.idle.onIdleEnd.subscribe(() => {
      this.idleState = 'You are no longer idle!';
      this.closeWarningPopup(); // Close the popup when idle ends
    });

    this.idle.onTimeout.subscribe(() => {
      this.idleState = 'Timed out!';
      this.timedOut = true;
      this.closeWarningPopup();
      this.router.navigate(['/login']); // Redirect to login
    });

    this.idle.onTimeoutWarning.subscribe((countdown) => {
      this.countdownValue = countdown;
      if (!this.isDialogOpen) {
        this.showWarningPopup(); // Open dialog only once
      } else {
        this.updateCountdownInDialog(countdown); // Update countdown in open dialog
      }
    });

    // Set the keepalive ping interval
    this.keepalive.interval(15);
    this.keepalive.onPing.subscribe(() => (this.lastPing = new Date()));

    // Start watching for idle
    this.startWatching();
  }

  startWatching() {
    this.idle.watch();
  }

  resetIdle() {
    this.idle.watch(); // Reset idle timer
  }

  private showWarningPopup() {
    if (!this.isDialogOpen) {
      // Open dialog only if not already open
      const dialogRef = this.dialog.open(WarningPopupComponent, {
        data: { countdown: this.countdownValue }, // Pass initial countdown value
        disableClose: true, // Prevent manual close
      });

      this.isDialogOpen = true;

      dialogRef.afterClosed().subscribe(() => {
        this.isDialogOpen = false; // Reset flag when dialog closes
      });
    }
  }

  private closeWarningPopup() {
    if (this.isDialogOpen) {
      this.dialog.closeAll(); // Close all dialogs if open
      this.isDialogOpen = false;
    }
  }

  private updateCountdownInDialog(countdown: number) {
    const openDialogs = this.dialog.openDialogs;
    if (openDialogs.length > 0) {
      // Get the first open dialog and update countdown
      const dialogRef = openDialogs[0];
      dialogRef.componentInstance.updateCountdown(countdown);
    }
  }
}